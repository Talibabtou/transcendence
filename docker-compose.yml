services:
  db:
    container_name: db
    image: postgres:17.2-alpine3.21
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    expose:
      - "5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - backend

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:8.14.0
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - backend

  backend:
    container_name: backend
    build: 
      context: ./backend
      target: ${STAGE:-prod}
    env_file:
      - .env
    volumes:
      - ./backend/app:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-postgres}
    depends_on:
      - pgadmin
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - backend

  randomizer:
    container_name: randomizer
    build: 
      context: ./game_script
    command: python /app/scripts/simulation.py
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      # Specify the configuration file for Prometheus
      - '--config.file=/etc/prometheus/prometheus.yml'
      # Set the path for Prometheus to store its time series database
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      # Specify the path for console libraries used in the web UI
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      # Specify the path for console templates used in the web UI
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - backend
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: unless-stopped
    networks:
      - backend
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg

  postgres_exporter:
    container_name: postgres_exporter
    image: prometheuscommunity/postgres-exporter:v0.16.0
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres_exporter:test@db:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

  redis:
    image: redis:latest
    # container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

# https://github.com/elastic/dockerfiles/tree/f505af6b7b081b1bcae6eb3037c998427ddc025f/elasticsearch
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_SYSTEM_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - ELASTIC_USERNAME=elastic
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - backend

# https://github.com/elastic/dockerfiles/tree/f505af6b7b081b1bcae6eb3037c998427ddc025f/kibana
  kibana:
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.17.1
    volumes:
      - kibanadata:/usr/share/kibana/data
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_SYSTEM_PASSWORD}
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/api/status"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - backend

  # https://github.com/elastic/dockerfiles/tree/f505af6b7b081b1bcae6eb3037c998427ddc025f/logstash
  # https://medium.com/@bsrini/dockerizing-logstash-a-step-by-step-guide-ed7f4e594cb4
  logstash:
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:8.17.1
    volumes:
      - logstashdata:/usr/share/logstash/data
    ports:
      - 5044:5044
    networks:
      - backend

volumes:
  certs:
  esdata:
  kibanadata:
  logstashdata:
  pgdata:
  pgadmin-data:
  prometheus_data:

networks:
  backend: